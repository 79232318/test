当线程1访问代码块并获取锁对象时，会在java 对象头 和 栈帧 中记录偏向的锁的threadID，
因为偏向锁不会主动释放锁，因此以后线程1再次获取锁的时候，需要比较当前线程的threadID和Java对象头中的threadID是否一致，如果一致（还是线程1获取锁对象），则无需使用CAS来加锁、解锁；
如果不一致（其他线程，如线程2要竞争锁对象，而偏向锁不会主动释放因此还是存储的线程1的threadID），那么需要查看Java对象头中记录的线程1是否存活，
如果没有存活，那么锁对象被重置为无锁状态，其它线程（线程2）可以竞争将其设置为偏向锁；
如果存活，那么立刻查找该线程（线程1）的栈帧信息，如果线程1不再使用该锁对象，那么将锁对象状态设为无锁状态，重新偏向新的线程；
如果还是需要继续持有这个锁对象，那么暂停当前线程1，撤销偏向锁，升级为轻量级锁，

