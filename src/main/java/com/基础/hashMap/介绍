(1)HashMap的实现原理?
  		 hashmap采用entry数组存储key-value对，每一个键值对组成一个entry实体，entry类实际上是一个单向链表，他剧透next指针，可以连接下一个entry实体
(2)为什么采有数组+链表？
		   数组是来确定桶的位置，利用元素的key的hash值对数组长度取模得到
		   链表是用来解决hash冲突的，当hash值一样时，就在数组上对应位置形成一个链表，这里的hash不是指hashcode，而是将hashcode高低十六位异或过。
(3)解决hash冲突有哪些办法？
		1.开放定址法2.链地址法3.在hash法4.公共溢出区域法
(4)可以用linkedlist 或 ArrayList代替数组吗？
		可以，但是因为数组效率最高，因为在hashmap定位桶的位置是利用元素的key的哈希值对数组长度取模得到的。此时，需要对桶的位置进行查找，数组的效率比linkedlist高。
		那arraylist底层也是数组，为什么不采用，因为采用基本数组结构，扩容机制可以自己定，hashmap的扩容机制是2的次幂，在取模的效率中最高。而ArrayList是1.5。
(5)hashmap在什么条件下扩容
                    在bucket满（超过loadFactor * currentCapacity）的时候要resize，因为为了最大程度避免hash冲突
(6)为什么扩容是2的次幂  
        hashmap为了存取高效，要尽量减少碰撞，就要尽量把数据分配均匀，每个链表的长度相同。取模可以实现。但是hash%length运算不如位移运算快hash&（length-1）
        那为什么是2的次幂呢？
                    因为2的n次方实际就是1的后面n个0，2的n次方-1，实际就是n个1。
                    比如长度为8时候3&(8-1)=3,2&(8-1)=2,避免了碰撞，
                    比如长度为5时候3&(5-1)=0,2&(5-1)=0,出现碰撞，不能均匀分配。
                    所以，保证容积是2的次幂是为了保证在做取模的时候，每一位都&1。
(7)为什么要先高16位异或低16位再取模运算?
                    这样做也是为了避免hash冲突。
(8)知道hashmap中put元素的过程是什么样么?
                    对key的hashcode进行hash运算（这里的hash不是指hashcode，而是将hashcode高低十六位异或过。），计算index位置。
                    如果没有碰撞直接放到bucket里；
                    如果碰撞了，以链表的形式存在bucket后，如果相同key（值一样或地址一样），替换旧的value；
                    如果碰撞导致链表过长（大于等于TREEIFY_THRESHOLD），就把链表变成红黑数；
                    如果bucket满了，就要resize；
(9)知道hashmap中get元素的过程是什么样么?   
                    对key的hashcode做hash计算，得到index；
                    由index查找桶，在通过key.equal(k)查找对应的entry；
                    若为数，则在树则在树中通过key.equals(k)查找，O(logn)；
                    若为链表，则在链表中通过key.equals(k)查找，O(n)。
(10)你还知道哪些hash算法？            
        String的hashcode实现        
	        public int hashCode() {
			    int h = hash;
		        if (h == 0 && value.length > 0) {
		            char val[] = value;
		
		            for (int i = 0; i < value.length; i++) {
		                h = 31 * h + val[i];
		            }
		            hash = h;
		        }
		        return h;
            }
         String类中的hashCode计算方法还是比较简单的，就是以31为权，每一位字符的ASCII值进行运算，用（int的最大）自然溢出来等效取模。
                      哈希计算公式可以计为s[0]31^(n-1) + s[1]31^(n-2) + … + s[n-1]
            那为什么以31为质数呢?
         31*i=32*i-i=(i<<5)-i，这种位移与减法结合的计算相比一般的运算快很多。
(11)为什么hashmap的在链表元素数量超过8时改为红黑树?	
            知道jdk1.8中hashmap改了啥么?	
         ·由数组+链表--->数组+链表+红黑树
         ·优化了高位运算的hash算法：h^(h >>> 16)
         ·扩容后，元素要么是在原位置，要么是在原位置在移动2次幂的位置，且链表顺序不变
                       最后一条是重点，因为最后一条的变动，hashmap在1.8中，不会在出现死循环问题。
            为什么在解决hash冲突的时候，不直接用红黑树?而选择先用链表，再转红黑树?
                       红黑树数据多的时候，查询快，但是新增节点效率慢。
                       当元素小于8个当时候，此时做查询操作，链表结构已经能保证查询性能。当元素大于8个的时候，此时需要红黑树来加快查询速度，但是新增节点的效率变慢了。
                       因此一开始使用红黑树结构，元素太少，新增效率比较慢，无疑浪费性能；
           不用红黑树，用二叉查找树可以么?
                       可以，但是二叉树在特殊情况下会变成一条线性结构（这就跟原来使用的链表结构一样了），遍历查找会变非常慢。
           那为什么阀值是8呢?     
            		不知道          
           当链表转为红黑树后，什么时候退化为链表? 
                       为6的时候退转为链表，中间有个差值7可以防止链表和树之间频繁的转换。
(12)HashMap的并发问题?
    HashMap在并发编程环境下有什么问题啊?            
         ·多线程扩容，会导致死循环问题
         ·多线程put的时候可能会导致元素丢失
         ·put为非null元素，get可能为null
         在jdk1.8中还有这些问题么?
                      在jdk1.8中扩容后，元素要么是在原位置，要么是在原位置在移动2次幂的位置，且链表顺序不变，这样解决了死循环问题，其他两个问题还在。
         怎么解决其他两个问题？
                      使用比如ConcurrentHashmap，Hashtable等线程安全等集合类。
(13)你一般用什么作为HashMap的key?
          一般用Integer、String这种不可变类当HashMap当key，而且String最为常用。
         ·因为字符串是不可变的，因为创建的时候hashcode就被缓存了，不需要重新计算。
         ·因为获取对象的时候要用到hashcode和equal方法，那么键对象正确的重写这两个方法，然而这些类已经很规范的复写了。
          我用可变类当HashMap的key有什么问题?   
         ·hashcode可能发送改变，导致put进去get不出来           
          如果让你实现一个自定义的class作为HashMap的key该如何实现？     
                      此题考察两个知识点
               ·重写hashcode和equals方法注意什么?
					针对问题一，记住下面四个原则即可
					(1)两个对象相等，hashcode一定相等
					(2)两个对象不等，hashcode不一定不等
					(3)hashcode相等，两个对象不一定相等
					(4)hashcode不等，两个对象一定不等
               ·如何设计一个不变类   
                    (1)类添加final修饰符，保证类不被继承。
					如果类可以被继承会破坏类的不可变性机制，只要继承类覆盖父类的方法并且继承类可以改变成员变量值，那么一旦子类以父类的形式出现时，不能保证当前类是否可变。
					
					(2)保证所有成员变量必须私有，并且加上final修饰
					通过这种方式保证成员变量不可改变。但只做到这一步还不够，因为如果是对象成员变量有可能再外部改变其值。所以第4点弥补这个不足。
					
					(3)不提供改变成员变量的方法，包括setter
					避免通过其他接口改变成员变量的值，破坏不可变特性。
					
					(4)通过构造器初始化所有成员，进行深拷贝(deep copy)
					如果构造器传入的对象直接赋值给成员变量，还是可以通过对传入对象的修改进而导致改变内部变量的值。例如：
					
					public final class ImmutableDemo {
						private final int[] myArray;
						public ImmutableDemo(int[] array) {
							this.myArray = array; // wrong
						}
					}
					这种方式不能保证不可变性，myArray和array指向同一块内存地址，用户可以在ImmutableDemo之外通过修改array对象的值来改变myArray内部的值。
					为了保证内部的值不被修改，可以采用深度copy来创建一个新内存保存传入的值。正确做法：
					
					public final class MyImmutableDemo {
						private final int[] myArray;
						public MyImmutableDemo(int[] array) {
						this.myArray = array.clone();
						}
					}
					(5)在getter方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝
					这种做法也是防止对象外泄，防止通过getter获得内部可变成员对象后对成员变量直接操作，导致成员变量发生改变。
                       
                                