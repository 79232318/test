	抽象工厂模式（Abastract Factory Pattern）是指提供一个创建一系列相关或相互依赖对象的接口，无须指定他们具体的类。
客户端（应用层）不依赖于产品类实例如何被创建、实现等细节，强调的是一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量重复的代码。
需要提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。

	接下来我们来看一个具体的业务场景而且用代码来实现。还是以课程为例，每个课程不仅要提供课程的录播视频，而且还要提供课堂笔记。
相当于现在的业务变更为同一个课程不单纯是一个课程信息，要同时包含录播视频、课堂笔记甚至还要提供源码才能构成一个完整的课程。
在产品等级中增加两个产品 IVideo 录播视频和 INote 课堂记。

	上面的代码完整地描述了两个产品族 Java 课程和 Python 课程，也描述了两个产品等级视频和笔记。
抽象工厂非常完美清晰地描述这样一层复杂的关系。
但是，不知道大家有没有发现，如果我们再继续扩展产品等级，将源码 Source 也加入到课程中，那么我们的代码从抽象工厂，到具体工厂要全部调整，很显然不符合开闭原则。
因此抽象工厂也是有缺点的：

	1.规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口。
	
	2.增加了系统的抽象性和理解难度。